## key - 원시, 목적, 실행, thread ##

** 원시프로그램이란 사람이 작성한 소스. 일반적으로 Source라 함은 원시 프로그램을 말한다.	
	  # (원시프로그램 확장자는 *.Java/ 이클립스에서는 src폴더에 저장/ 개발이 목적)
   int a = 30;과 같은 형식으로 작성한 것이 원시소스. 이걸 2진수로 바꿔야[기계어(-0과 1로 조합)로 번역<컴파일>] 컴퓨터의 언어.
   이를 목적프로그램(기계가 이해)이라 한다.		
	  # (목적프로그램 확장자는 *.Class/ 이클립스에서는 bin폴더에 저장/ 컴퓨터에게 실행시키는 것이 목적)
	>> Java는 컴파일 언어, 원시프로그램 확장자는 .Java / 컴파일한 목적프로그램(번역된 프로그램)의 확장자는 .Class

* Ctrl + f11 >> 컴파일(JDK) 후, 실행(runtime, JRE)하라(원시프로그램을 목적프로그램으로 컴파일하고 이를 실행)
	# 개발 후, 배포할 때에는 원시프로그램은 지우고 목적프로그램만 보내면 내가 짠 소스를 숨길 수 있다.

** 언어의 종류 : 컴파일 언어 / 인터프리터
		컴파일 언어 : (자바, C) 원시프로그램을 목적프로그램으로 만들고 이 목적프로그램을 실행하는 것, 예로 자바에서 Ctrl + f11
					컴파일 언어가 속도는 더 빠르다.
		인터프리터 언어 : (자바스크립트) 목적프로그램으로 만들지 않고 개발된 언어를 그 즉시 번역, 실행하는 것
					인터프리터 언어가 개발 환경에 적응하는 이점이 있다.

** Java : JDK, JRE( >JVM 이해)
	      JDK - random, scanner 클래스 기능 등 개발 관련
	      JRE - runtime 관련/ 목적프로그램을 실행시키기 위한 것
	      JVM - 


		# 목적 프로그램에 아래와 같은 파일 세 개있다고 생각. 저 세 개가 하나의 프로그램 단위. 
		 main.Class
		 mge.Class
		 member.Class
		 main, mge, member는 하드디스크에 저장되어 있다.
		 실행은 CPU, RAM의 자원이 필요하다.
		 연산자가 많아서 계속 참조하게하면 CPU 사용이 많고, 변수를 많이 쓰면 RAM 사용이 많다.
		 CPU 사용 >> 명령어(연산자, 메서드 처리 등..), RAM에 변수를 가져와서 뭔가 처리하는게 CPU

		- 위 클래스들을 실행시키면 RunTime으로 간다.(프로그램 클래스 로드/ 소스코드를 가져와라/ ; 단위로 잘라서 가져와서 처리)
	

		
		** RunTime **(JVM)_ 메모리 일부에 존재하는 것
		JVM 구조(Stack과 Heap)
		
		1. Method 영역
		* 소스파일, 멤버변수, Static(공용변수: 객체를 만들지 않아도 접근 가능) 저장
		
		2. Stack 영역								3. Heap 영역
    	* 메서드 call할 때,						* 객체(인스턴스)의 생성, 사용, 소멸에 관련
    	- 메서드가 Stack에 쌓임						- 아무도 객체를 참조하지 않을때 GC가 제거, 하지않으면 메모리 누수
    	- 그 안에 지역변수가 있으면 지역변수도 저장
    	- 메서드가 끝나면 지워지며 지역변수도 같이 제거
		* FILO구조			
		* 지역변수 저장		

		Method, Heap은 모든 스레드가 접근 가능하다(공통으로 사용하는 영역). 공통으로 사용할 경우, 동시에 접근할 때 위험할 수 있다.
		Stack은 각각의 스레드마다 접근 가능한 영역이 따로 있다.
		thread1이 Static변수 a를, thread2가 Static변수 b를 각각 사용하기 위해서 따로 선언할지라도, 1,2 모두 a,b에 접근 가능하다.
		공통적으로 쓰는데 숨길 필요가 없는 것(회사명, 이자 등)은 Static으로 선언해도 된다.



		# 생각 # 실행중이란?
		- 목적프로그램은 실행중인가? NO
		원시프로그램을 기계어로 번역한 것이 목적프로그램이다. 실행중이라는 것은 주기억장치에 있다는 것.
		윈도우탐색기에서 검색된다는 것은 보조기억장치(하드디스크)에서 검색하는 것.
		실행중인 프로그램은 주기억장치(메모리, RAM)로 넘어오는 것. 실행은 목적프로그램을 주기억장치로 옮겨서 실행하는 프로그램
		코드를 실행하는 프로그램이 thread(목적프로그램을 실행하는 프로그램) - 지금까지 했던 것은 싱글스레드
		apple 출력하고 키보드 입력 대기중에 카운팅 기능을 넣고싶다면, 카운팅은 또 다른 스레드가 필요. 멀티스레드		
		자바에서 실행할 때, 스레드 단위로 실행.. 코드를 로딩해서 CPU에서 처리, RAM에 저장하는 것이 스레드.
		Ctrl + f11 누르면 스레드가 일을 처리하는데, 가장 먼저 처리하는 코드는 메인메서드(public static void main...)이다.
		그래서 메인메서드가 프로그램의 시작이라고 하는 것.
		
		
		자바 기술 Stack
		1. 변수 - 원시변수와 참조변수
		2. 자료형
		3. 조건문
		4. 반복문
		5. class와 객체, 생성자
		6. class 추상화
		7. 메서드 정의와 호출
		8. 접근제어자
		9. 공용변수 static
		10. 상수 : final
		11. List자료형 중 ArrayList
		12. JVM    
		13. 싱글톤 디자인 패턴       
		
		* 1 - 13에 대해서 스스로 정리해서 남을 설득시킬 수 있도록 공부
		* 의도적으로 이론 생각해서 코드 작성
	   
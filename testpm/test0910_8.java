package testpm;

public class test0910_8 {

	public static void main(String[] args) {
		// 1 1 0 2
		// 3 2 1 2
		// 0 0 3 2
		// 4 4 4 4
		// 2 4 3 1
		// 2 4 1 3
		int[][] a = { { 1, 1, 0, 2 }, { 3, 2, 1, 2 }, { 0, 0, 3, 2 }, { 4, 4, 4, 4 }, { 2, 4, 3, 1 }, { 2, 4, 1, 3 } };

		// 위와 같은 게임 배열에서 같은 번호가 가로나 세로로 각각 3개 이상이면 제거가 가능하다.
		// 제거가 가능한 블록의 좌표를 출력하시오

		for (int i = 0; i < 6; i++) {
			// 가로
			for (int j = 0; j < a[0].length - 1; j++) {
				if (a[i][j] == a[i][j + 1]) {

					if (a[i][j + 1] == a[i][j + 2]) {

						if (a[i][j + 2] == a[i][j + 3]) {
							System.out.println("가로 겹침으로 제거 가능한 좌표는 " + "{" + i + ", " + j + "}" + "{" + i + ", "
									+ (j + 1) + "}" + "{" + i + ", " + (j + 2) + "}" + "{" + i + ", " + (j + 3) + "}");
							break;
						} else {
							System.out.println("가로 겹침으로 제거 가능한 좌표는 " + "{" + i + ", " + j + "}" + "{" + i + ", "
									+ (j + 1) + "}" + "{" + i + ", " + (j + 2) + "}");
							break;
						}

					} else
						break;

				}
			}
			// 세로
			for (int j = 0; j < 4; j++) {
				if (a[i][j] == a[i + 1][j]) {
					if (a[i + 1][j] == a[i + 2][j]) {
						System.out.println("세로 겹침으로 제거 가능한 좌표는 " + "{" + i + ", " + j + "}" + "{" + (i + 1) + ", " + j
								+ "}" + "{" + (i + 2) + ", " + j + "}");
						i = i + 2;
						if (i >= 4) {
							break;
						}
					} else {
						i++;
					}
				}
			}
		}

		// 2차원 배열에서의 값을 판단해야하므로
		// 2중 for문을 이용하였음.

		// 가로 겹침을 이용하는 경우, 1번 index의 값과 2번 index의 값이 다를경우
		// 그 이후의 값은 판별할 필요가 없으므로 (3개 겹침 불가능) break;
		// 그 이후 겹침으로 판별되는 경우에도 더 판별할 이유가 없으므로 break;

		// 세로 겹침의 경우도 따로 판별하기 위해서
		// for문을 따로 적용하였는데,
		// 가로의 경우 break;로 for문을 종료하였기 때문에 따로 적용이 필요 하였음
		// 세로 겹침의 경우도 7번과 같이 해결 하였음

	}

}

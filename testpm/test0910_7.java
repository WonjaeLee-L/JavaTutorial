package testpm;

public class test0910_7 {

	public static void main(String[] args) {
		// 1 1 0 2
		// 3 2 1 2
		// 0 0 3 2
		// 4 4 4 4
		// 2 4 3 1
		// 2 4 1 3
		int[][] a = { { 1, 1, 0, 2 }, { 3, 2, 1, 2 }, { 0, 0, 3, 2 }, { 4, 4, 4, 4 }, { 2, 4, 3, 1 }, { 2, 4, 1, 3 } };

		// 위와 같은 게임 배열에서 같은 번호가 세로로 연속 3개 이상이면 제거가 가능하다.
		// 제거가 가능한 블록의 좌표를 출력하시오
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				if (a[i][j] == a[i + 1][j]) {
					if (a[i + 1][j] == a[i + 2][j]) {
						System.out.println("{" + i + ", " + j + "}" + "{" + (i + 1) + ", " + j + "}" + "{" + (i + 2)
								+ ", " + j + "}");
						i = i + 2;
						if (i >= 4) {
							break;
						}
					} else {
						i++;
					}

				}
			}
		}
		// 같은 번호가 세로로 연속 3개 이상이라는 조건에서,
		// 배열의 모든 값을 판별해야하므로
		// 2중 for문을 이용하였음.
		// 같은 이유로 그 내부에 if문을 사용함.
		// 조건은 세로로 두 번호가 같은 경우를 고려하고
		// 성립할 경우, 다시 세 번호가 일치하는지를 확인하였고
		// 일치하면 출력하되, 같은 자리의 값을 다시 판별하지 않게 하기 위해서
		// i값을 2 증가시키고, i 값이 커질 경우 break로 반복문을 나가게 함
		// 세 번호가 일치하지 않으면, 두 번호만 일치했으므로 i값을 1 증가시킴
		// *** 세개가 일치하는 조건문으로 수정하고, else if로 두개가 일치하는 경우를
		// 고려하는 방법도 가능 ***
		// 중간에 특정 값을 지정하는게 아닌, 처음부터 판별하기에 가능한 코드

	}

}
